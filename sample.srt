'use client';

import { useState, useEffect, useRef } from 'react';
import { 
  Video, Sparkles, Music, FileText, Play, CheckCircle, ChevronRight, ChevronDown, 
  Plus, Upload, Camera, Palette, Settings, Film, Sparkle, Type, Zap, FileVideo, 
  Clock, Save, Share, Layers, LayoutGrid, Home, Users, BarChart2, HelpCircle, Download
} from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { ScrollArea } from '@/components/ui/scroll-area';
import axios from 'axios';
import { createClient } from '@supabase/supabase-js';
import { Player } from '@remotion/player';
import { AbsoluteFill, Audio, Img, Sequence } from 'remotion';

// Initialize Supabase client
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

// Animation variants for pulse effect
const pulseAnimation = {
  scale: [1, 1.03, 1],
  transition: {
    duration: 2,
    repeat: Infinity,
    repeatType: 'reverse',
  }
};

// Navigation Item Component (unchanged)
const NavItem = ({ icon, label, active, onClick }) => {
  // ... (same as original)
};

// Particles Component (unchanged)
const Particles = () => {
  // ... (same as original)
};

// Remotion Video Composition
const MyVideo = ({ images, audioUrl, subtitles, subtitleStyle, videoDuration }) => {
  const frameRate = 30;
  const imageDuration = 3; // 3 seconds per image
  const totalImagesDuration = images.length * imageDuration;

  return (
    <AbsoluteFill style={{ backgroundColor: 'black' }}>
      {/* Audio */}
      {audioUrl && (
        <Audio src={audioUrl} />
      )}

      {/* Images */}
      {images.map((img, index) => (
        <Sequence
          key={index}
          from={index * imageDuration * frameRate}
          durationInFrames={imageDuration * frameRate}
        >
          <Img
            src={img}
            style={{
              width: '100%',
              height: '100%',
              objectFit: 'cover',
            }}
          />
        </Sequence>
      ))}

      {/* Subtitles */}
      {subtitles.map((subtitle, index) => (
        <Sequence
          key={index}
          from={Math.floor(subtitle.start * frameRate)}
          durationInFrames={Math.floor((subtitle.end - subtitle.start) * frameRate)}
        >
          <AbsoluteFill
            style={{
              display: 'flex',
              alignItems: 'flex-end',
              justifyContent: 'center',
              paddingBottom: '20px',
            }}
          >
            <div
              style={{
                background:
                  subtitleStyle === 'none'
                    ? 'transparent'
                    : subtitleStyle === 'minimal'
                    ? 'rgba(0, 0, 0, 0.5)'
                    : subtitleStyle === 'bold'
                    ? 'rgba(0, 0, 0, 0.7)'
                    : subtitleStyle === 'outlined'
                    ? 'transparent'
                    : subtitleStyle === 'gradient'
                    ? 'linear-gradient(to right, #8b5cf6, #3b82f6)'
                    : 'rgba(0, 0, 0, 0.6)',
                color: subtitleStyle === 'outlined' ? '#fff' : '#fff',
                fontSize: subtitleStyle === 'bold' ? '24px' : '20px',
                fontWeight: subtitleStyle === 'bold' ? 'bold' : 'normal',
                textShadow:
                  subtitleStyle === 'outlined'
                    ? '2px 2px 0 #000, -2px -2px 0 #000, 2px -2px 0 #000, -2px 2px 0 #000'
                    : 'none',
                padding: '10px 20px',
                borderRadius: '8px',
                maxWidth: '80%',
                textAlign: 'center',
                animation: subtitleStyle === 'animated' ? 'pulse 1s infinite' : 'none',
              }}
            >
              {subtitle.text}
            </div>
          </AbsoluteFill>
        </Sequence>
      ))}
    </AbsoluteFill>
  );
};

export default function AICreateVideo() {
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [selectedNav, setSelectedNav] = useState('create-video');
  const [activeStep, setActiveStep] = useState(1);
  const [imageType, setImageType] = useState(null);
  const [imagePrompt, setImagePrompt] = useState('');
  const [generatedImages, setGeneratedImages] = useState([]);
  const [isGeneratingImages, setIsGeneratingImages] = useState(false);
  const [audioText, setAudioText] = useState('');
  const [selectedVoice, setSelectedVoice] = useState('sonic');
  const [audioEmotion, setAudioEmotion] = useState('neutral');
  const [audioSpeed, setAudioSpeed] = useState('normal');
  const [audioUrl, setAudioUrl] = useState(null);
  const [isGeneratingAudio, setIsGeneratingAudio] = useState(false);
  const [subtitleStyle, setSubtitleStyle] = useState('none');
  const [subtitles, setSubtitles] = useState([]);
  const [isGeneratingSubtitles, setIsGeneratingSubtitles] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [message, setMessage] = useState('');
  const [videoDuration, setVideoDuration] = useState(0);
  const user = { id: 'user123' }; // Mock user for demo; replace with actual auth

  // Sample data for demonstration (unchanged)
  const imageTypes = [
    { id: 'realistic', label: 'Realistic', description: 'High-quality photorealistic images', icon: Camera },
    { id: 'cartoon', label: 'Cartoon', description: 'Stylized cartoon-style illustrations', icon: Palette },
    { id: 'abstract', label: 'Abstract', description: 'Abstract and artistic visuals', icon: Layers },
    { id: 'pixel', label: 'Pixel Art', description: 'Retro-style pixel art graphics', icon: LayoutGrid },
  ];

  const voiceOptions = [
    { id: 'sonic', label: 'Sonic (Neutral Male)' },
    { id: 'claire', label: 'Claire (Soft Female)' },
    { id: 'morgan', label: 'Morgan (Deep Male)' },
  ];

  const emotionOptions = ['neutral', 'happy', 'sad', 'excited'];
  const speedOptions = ['slow', 'normal', 'fast'];

  // Generate Images with Replicate API
  const generateImages = async () => {
    if (!imagePrompt.trim()) {
      setMessage('Please provide an image prompt.');
      return;
    }

    setIsGeneratingImages(true);
    setMessage('Generating images...');

    try {
      const modelPath = 'stability-ai/stable-diffusion'; // Adjust based on imageType
      const response = await fetch('/api/generate-images', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          modelPath,
          input: {
            prompt: `${imagePrompt}, ${imageType} style`,
            num_outputs: 4,
            width: 607,
            height: 1080,
          },
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Failed to generate images');
      }

      const imageUrls = data.output.map((item) => item.url); // Adjust based on actual API response
      setGeneratedImages(imageUrls);
      setMessage('Images generated successfully!');
    } catch (error) {
      console.error('Error generating images:', error);
      setMessage(`Error generating images: ${error.message}`);
    } finally {
      setIsGeneratingImages(false);
    }
  };

  // Generate Audio with Cartesia API
  const generateAudio = async () => {
    if (!audioText) {
      setMessage('Please provide text for audio generation.');
      return;
    }

    setIsGeneratingAudio(true);
    setMessage('Generating audio...');

    try {
      const response = await axios.post(
        'https://api.cartesia.ai/tts/bytes',
        {
          model_id: selectedVoice,
          transcript: audioText,
          voice: {
            mode: 'id',
            id: 'fa7bfcdc-603c-4bf1-a600-a371400d2f8c',
          },
          output_format: {
            container: 'mp3',
            bit_rate: 64000,
            sample_rate: 44100,
          },
          language: 'en',
        },
        {
          headers: {
            'Cartesia-Version': '2024-06-10',
            'X-API-Key': process.env.NEXT_PUBLIC_CARTESIA_API_KEY,
            'Content-Type': 'application/json',
          },
          responseType: 'blob',
        }
      );

      const audioBlob = new Blob([response.data], { type: 'audio/mp3' });
      const fileName = `audio_${user?.id || 'anonymous'}_${Date.now()}.mp3`;

      const { error: uploadError } = await supabase.storage
        .from('avatars')
        .upload(fileName, audioBlob, {
          contentType: 'audio/mp3',
        });

      if (uploadError) {
        throw new Error(`Failed to upload audio: ${uploadError.message}`);
      }

      const { data: publicUrlData } = supabase.storage
        .from('avatars')
        .getPublicUrl(fileName);

      if (!publicUrlData?.publicUrl) {
        throw new Error('Failed to retrieve public URL');
      }

      const audioUrl = publicUrlData.publicUrl;
      setAudioUrl(audioUrl);

      const audioEl = document.createElement('audio');
      audioEl.src = audioUrl;
      audioEl.onloadedmetadata = () => {
        setVideoDuration(audioEl.duration);
      };

      setMessage('Audio generated and uploaded successfully!');
    } catch (error) {
      console.error('Error generating audio:', error);
      setMessage(`Error generating audio: ${error.message}`);
    } finally {
      setIsGeneratingAudio(false);
    }
  };

  // Generate Subtitles with Transcription API
  const generateSubtitles = async () => {
    if (!audioUrl) {
      setMessage('Please generate audio first.');
      return;
    }

    setIsGeneratingSubtitles(true);
    setMessage('Generating subtitles...');

    try {
      const response = await fetch('/api/transcribe', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ audioUrl, segmentStart: 0 }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to transcribe audio');
      }

      const transcription = await response.json();
      let subtitles = [];

      const utterances = transcription?.results?.channels?.[0]?.utterances;
      if (utterances && Array.isArray(utterances)) {
        subtitles = utterances.map((utterance) => ({
          text: utterance.transcript,
          start: utterance.start,
          end: utterance.end,
        })).filter((sub) => sub.start >= 0 && sub.end <= videoDuration);
      }

      if (subtitles.length === 0) {
        subtitles = [{ text: 'No audio detected', start: 0, end: videoDuration }];
      }

      setSubtitles(subtitles);
      setMessage('Subtitles generated successfully!');
    } catch (error) {
      console.error('Error generating subtitles:', error);
      setMessage(`Error generating subtitles: ${error.message}`);
      setSubtitles([{ text: 'Error generating subtitles', start: 0, end: videoDuration }]);
    } finally {
      setIsGeneratingSubtitles(false);
    }
  };

  const togglePlayPause = () => {
    setIsPlaying(!isPlaying);
  };

  const toggleSidebar = () => {
    setSidebarOpen(!sidebarOpen);
  };

  const progress = Math.min(100, activeStep * 20);

  return (
    <div className="flex h-screen bg-gray-950 text-white overflow-hidden relative">
      {/* Sidebar and other unchanged sections */}
      {/* ... (same as original) */}

      {/* Main Content */}
      <div className="flex-1 flex flex-col z-10">
        {/* Navbar (unchanged) */}
        {/* ... (same as original) */}

        {/* Main Content Area */}
        <div className="flex-1 overflow-auto p-8">
          <div className="max-w-6xl mx-auto">
            <div className="mb-8">
              <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-blue-400">
                Create AI-Powered Video
              </h1>
              <p className="text-gray-400 mt-2">
                Generate stunning reels with AI-driven visuals, audio, and subtitles
              </p>
            </div>

            {/* Progress Bar (unchanged) */}
            <div className="w-full bg-gray-800/60 h-2 rounded-full mb-8 overflow-hidden backdrop-blur-sm">
              <motion.div 
                initial={{ width: 0 }}
                animate={{ width: `${progress}%` }}
                transition={{ type: 'spring', stiffness: 50 }}
                className="h-full bg-gradient-to-r from-purple-600 to-blue-500"
              />
            </div>

            <div className="flex gap-8">
              {/* Steps Sidebar (unchanged) */}
              <div className="lg:w-64 shrink-0">
                {/* ... (same as original) */}
              </div>

              {/* Main Content */}
              <div className="flex-1">
                <AnimatePresence mode="wait">
                  {/* Steps 1-4 (use the new generateImages, generateAudio, generateSubtitles) */}
                  {activeStep === 1 && (
                    <motion.div
                      key="step1"
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -20 }}
                      transition={{ duration: 0.3 }}
                      className="bg-gray-900/60 backdrop-blur-md rounded-2xl border border-gray-800/80 p-6 mb-8 shadow-xl relative overflow-hidden"
                    >
                      {/* ... (same as original, no changes needed) */}
                    </motion.div>
                  )}
                  {activeStep === 2 && (
                    <motion.div
                      key="step2"
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -20 }}
                      transition={{ duration: 0.3 }}
                      className="bg-gray-900/60 backdrop-blur-md rounded-2xl border border-gray-800/80 p-6 mb-8 shadow-xl relative overflow-hidden"
                    >
                      <div className="absolute -top-40 -right-40 w-96 h-96 bg-purple-900/30 rounded-full filter blur-3xl animate-pulse"></div>
                      <div className="relative z-10">
                        <div className="flex items-center gap-3 mb-6">
                          <div className="w-10 h-10 rounded-lg bg-purple-600/20 flex items-center justify-center">
                            <Camera size={20} className="text-purple-400" />
                          </div>
                          <div>
                            <h2 className="text-2xl font-bold">Generate Images</h2>
                            <p className="text-gray-400">Describe what you want to see in your reel</p>
                          </div>
                        </div>
                        <textarea
                          value={imagePrompt}
                          onChange={(e) => setImagePrompt(e.target.value)}
                          className="w-full bg-gray-900/80 border border-gray-700/80 rounded-xl py-4 px-5 text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-purple-500 mb-4 shadow-inner backdrop-blur-sm"
                          placeholder="Describe what you want to see (e.g., 'A futuristic city at night with neon lights and flying cars')"
                          rows={4}
                        />
                        <div className="flex flex-wrap gap-3 mb-6">
                          {['Urban landscape', 'Nature scene', 'Abstract art', 'Product showcase', 'Minimalist'].map(tag => (
                            <motion.div 
                              key={tag}
                              whileHover={{ scale: 1.05 }}
                              whileTap={{ scale: 0.95 }}
                              className="bg-gray-800/60 text-gray-300 px-3 py-1 rounded-lg text-sm cursor-pointer border border-gray-700/50"
                              onClick={() => setImagePrompt(tag)}
                            >
                              {tag}
                            </motion.div>
                          ))}
                        </div>
                        <motion.button
                          whileHover={{ scale: 1.03 }}
                          whileTap={{ scale: 0.97 }}
                          onClick={generateImages}
                          disabled={isGeneratingImages || !imagePrompt.trim()}
                          className={`${
                            isGeneratingImages || !imagePrompt.trim() ? 'opacity-50 cursor-not-allowed' : ''
                          } bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 px-6 rounded-lg flex items-center gap-3 shadow-lg shadow-purple-900/20`}
                        >
                          <Sparkles size={18} className="animate-pulse" />
                          {isGeneratingImages ? 'Generating...' : 'Generate Images'}
                        </motion.button>
                        {generatedImages.length > 0 && (
                          <motion.div 
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-6"
                          >
                            {generatedImages.map((img, index) => (
                              <motion.div
                                key={index}
                                whileHover={{ scale: 1.05, rotate: 1 }}
                                className="relative rounded-xl overflow-hidden aspect-[9/16] border-2 border-gray-800 group shadow-xl"
                              >
                                <img src={img} alt={`Generated ${index}`} className="w-full h-full object-cover" />
                                <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity flex items-end justify-center p-3">
                                  <button className="bg-white/20 backdrop-blur-sm text-white rounded-lg px-3 py-1.5 text-sm">
                                    Select
                                  </button>
                                </div>
                              </motion.div>
                            ))}
                          </motion.div>
                        )}
                        <div className="flex justify-between mt-6">
                          <motion.button
                            whileHover={{ scale: 1.05, x: -5 }}
                            whileTap={{ scale: 0.95 }}
                            className="bg-gray-800/80 text-white py-3 px-6 rounded-lg flex items-center gap-2"
                            onClick={() => setActiveStep(1)}
                          >
                            <ChevronRight size={18} className="rotate-180" />
                            Back
                          </motion.button>
                          <motion.button
                            whileHover={{ scale: 1.05, x: 5 }}
                            whileTap={{ scale: 0.95 }}
                            className="bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 px-6 rounded-lg flex items-center gap-2 shadow-lg shadow-purple-900/20"
                            onClick={() => setActiveStep(3)}
                          >
                            Continue
                            <ChevronRight size={18} />
                          </motion.button>
                        </div>
                      </div>
                    </motion.div>
                  )}
                  {activeStep === 3 && (
                    <motion.div
                      key="step3"
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -20 }}
                      transition={{ duration: 0.3 }}
                      className="bg-gray-900/60 backdrop-blur-md rounded-2xl border border-gray-800/80 p-6 mb-8 shadow-xl relative overflow-hidden"
                    >
                      <div className="absolute -top-40 -right-40 w-96 h-96 bg-purple-900/30 rounded-full filter blur-3xl animate-pulse"></div>
                      <div className="relative z-10">
                        <div className="flex items-center gap-3 mb-6">
                          <div className="w-10 h-10 rounded-lg bg-purple-600/20 flex items-center justify-center">
                            <Music size={20} className="text-purple-400" />
                          </div>
                          <div>
                            <h2 className="text-2xl font-bold">Add Audio</h2>
                            <p className="text-gray-400">Add voice or music to your reel</p>
                          </div>
                        </div>
                        <div className="flex flex-col md:flex-row gap-6">
                          <div className="md:w-1/2">
                            <div className="mb-4">
                              <label className="block text-sm font-medium text-gray-300 mb-2">Voice Narration</label>
                              <textarea
                                value={audioText}
                                onChange={(e) => setAudioText(e.target.value)}
                                className="w-full bg-gray-900/80 border border-gray-700/80 rounded-xl py-3 px-4 text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-purple-500 shadow-inner"
                                placeholder="Enter text for AI voice narration"
                                rows={5}
                              />
                            </div>
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                              <div>
                                <label className="block text-sm font-medium text-gray-300 mb-2">Voice</label>
                                <select
                                  value={selectedVoice}
                                  onChange={(e) => setSelectedVoice(e.target.value)}
                                  className="w-full bg-gray-900/80 border border-gray-700/80 rounded-lg py-2.5 px-4 text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                                >
                                  {voiceOptions.map(voice => (
                                    <option key={voice.id} value={voice.id}>{voice.label}</option>
                                  ))}
                                </select>
                              </div>
                              <div>
                                <label className="block text-sm font-medium text-gray-300 mb-2">Emotion</label>
                                <select
                                  value={audioEmotion}
                                  onChange={(e) => setAudioEmotion(e.target.value)}
                                  className="w-full bg-gray-900/80 border border-gray-700/80 rounded-lg py-2.5 px-4 text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                                >
                                  {emotionOptions.map(emotion => (
                                    <option key={emotion} value={emotion}>{emotion.charAt(0).toUpperCase() + emotion.slice(1)}</option>
                                  ))}
                                </select>
                              </div>
                              <div>
                                <label className="block text-sm font-medium text-gray-300 mb-2">Speed</label>
                                <select
                                  value={audioSpeed}
                                  onChange={(e) => setAudioSpeed(e.target.value)}
                                  className="w-full bg-gray-900/80 border border-gray-700/80 rounded-lg py-2.5 px-4 text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                                >
                                  {speedOptions.map(speed => (
                                    <option key={speed} value={speed}>{speed.charAt(0).toUpperCase() + speed.slice(1)}</option>
                                  ))}
                                </select>
                              </div>
                            </div>
                            <motion.button
                              whileHover={{ scale: 1.03 }}
                              whileTap={{ scale: 0.97 }}
                              onClick={generateAudio}
                              disabled={isGeneratingAudio || !audioText.trim()}
                              className={`${
                                isGeneratingAudio || !audioText.trim() ? 'opacity-50 cursor-not-allowed' : ''
                              } w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 rounded-lg flex items-center justify-center gap-2 shadow-lg shadow-purple-900/20`}
                            >
                              <Zap size={18} className={isGeneratingAudio ? 'animate-pulse' : ''} />
                              {isGeneratingAudio ? 'Generating...' : 'Generate Voice'}
                            </motion.button>
                          </div>
                          <div className="md:w-1/2">
                            {/* ... (Background Music section unchanged) */}
                          </div>
                        </div>
                        {audioUrl && (
                          <motion.div 
                            initial={{ opacity: 0, y: 10 }}
                            animate={{ opacity: 1, y: 0 }}
                            className="mt-4 p-4 bg-gray-800/40 rounded-xl"
                          >
                            <h3 className="text-gray-300 mb-2 font-medium">Preview Audio</h3>
                            <div className="flex items-center gap-2">
                              <button className="w-10 h-10 rounded-full bg-purple-600 flex items-center justify-center">
                                <Play size={16} fill="white" className="ml-0.5" />
                              </button>
                              <div className="flex-1 h-4 bg-gray-700 rounded-full overflow-hidden">
                                <div className="h-full w-2/3 bg-gradient-to-r from-purple-500 to-blue-500 relative">
                                  <div className="absolute right-0 top-0 bottom-0 w-3 h-3 bg-white rounded-full shadow-lg transform translate-x-1/2 -translate-y-1/4" />
                                </div>
                              </div>
                              <span className="text-sm text-gray-400">00:22</span>
                            </div>
                          </motion.div>
                        )}
                        <div className="flex justify-between mt-6">
                          <motion.button
                            whileHover={{ scale: 1.05, x: -5 }}
                            whileTap={{ scale: 0.95 }}
                            className="bg-gray-800/80 text-white py-3 px-6 rounded-lg flex items-center gap-2"
                            onClick={() => setActiveStep(2)}
                          >
                            <ChevronRight size={18} className="rotate-180" />
                            Back
                          </motion.button>
                          <motion.button
                            whileHover={{ scale: 1.05, x: 5 }}
                            whileTap={{ scale: 0.95 }}
                            className="bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 px-6 rounded-lg flex items-center gap-2 shadow-lg shadow-purple-900/20"
                            onClick={() => setActiveStep(4)}
                          >
                            Continue
                            <ChevronRight size={18} />
                          </motion.button>
                        </div>
                      </div>
                    </motion.div>
                  )}
                  {activeStep === 4 && (
                    <motion.div
                      key="step4"
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -20 }}
                      transition={{ duration: 0.3 }}
                      className="bg-gray-900/60 backdrop-blur-md rounded-2xl border border-gray-800/80 p-6 mb-8 shadow-xl relative overflow-hidden"
                    >
                      <div className="absolute -top-40 -right-40 w-96 h-96 bg-purple-900/30 rounded-full filter blur-3xl animate-pulse"></div>
                      <div className="relative z-10">
                        <div className="flex items-center gap-3 mb-6">
                          <div className="w-10 h-10 rounded-lg bg-purple-600/20 flex items-center justify-center">
                            <Type size={20} className="text-purple-400" />
                          </div>
                          <div>
                            <h2 className="text-2xl font-bold">Add Subtitles</h2>
                            <p className="text-gray-400">Generate and style your subtitles</p>
                          </div>
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                          <div>
                            <motion.button
                              whileHover={{ scale: 1.03 }}
                              whileTap={{ scale: 0.97 }}
                              onClick={generateSubtitles}
                              disabled={isGeneratingSubtitles}
                              className={`${
                                isGeneratingSubtitles ? 'opacity-50 cursor-not-allowed' : ''
                              } w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 rounded-lg flex items-center justify-center gap-2 shadow-lg shadow-purple-900/20 mb-4`}
                            >
                              <FileText size={18} className={isGeneratingSubtitles ? 'animate-pulse' : ''} />
                              {isGeneratingSubtitles ? 'Generating...' : 'Generate Subtitles from Audio'}
                            </motion.button>
                            <label className="block text-sm font-medium text-gray-300 mb-2">Subtitle Style</label>
                            <div className="grid grid-cols-3 gap-3">
                              {['none', 'minimal', 'bold', 'outlined', 'gradient', 'animated'].map((style) => (
                                <motion.div
                                  key={style}
                                  whileHover={{ scale: 1.05 }}
                                  whileTap={{ scale: 0.95 }}
                                  onClick={() => setSubtitleStyle(style)}
                                  className={`${
                                    subtitleStyle === style 
                                      ? 'bg-purple-600/30 border-purple-500' 
                                      : 'bg-gray-800/40 border-gray-700/50'
                                  } border rounded-lg p-3 text-center cursor-pointer`}
                                >
                                  <p className={`text-sm ${subtitleStyle === style ? 'text-white' : 'text-gray-400'}`}>
                                    {style.charAt(0).toUpperCase() + style.slice(1)}
                                  </p>
                                </motion.div>
                              ))}
                            </div>
                          </div>
                          <div className="bg-gray-900/80 border border-gray-700/80 rounded-xl p-4">
                            <h3 className="text-gray-300 mb-3 font-medium">Subtitle Preview</h3>
                            <div className="space-y-3">
                              {subtitles.map((subtitle, index) => (
                                <motion.div
                                  key={index}
                                  whileHover={{ scale: 1.02 }}
                                  className="p-3 bg-gray-800/60 rounded-lg border border-gray-700/50"
                                >
                                  <div className="flex justify-between text-xs text-gray-400 mb-1">
                                    <span>{subtitle.start.toFixed(1)}s</span>
                                    <span>{subtitle.end.toFixed(1)}s</span>
                                  </div>
                                  <p className="text-sm">{subtitle.text}</p>
                                </motion.div>
                              ))}
                            </div>
                          </div>
                        </div>
                        <div className="flex justify-between mt-6">
                          <motion.button
                            whileHover={{ scale: 1.05, x: -5 }}
                            whileTap={{ scale: 0.95 }}
                            className="bg-gray-800/80 text-white py-3 px-6 rounded-lg flex items-center gap-2"
                            onClick={() => setActiveStep(3)}
                          >
                            <ChevronRight size={18} className="rotate-180" />
                            Back
                          </motion.button>
                          <motion.button
                            whileHover={{ scale: 1.05, x: 5 }}
                            whileTap={{ scale: 0.95 }}
                            className="bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 px-6 rounded-lg flex items-center gap-2 shadow-lg shadow-purple-900/20"
                            onClick={() => setActiveStep(5)}
                          >
                            Continue
                            <ChevronRight size={18} />
                          </motion.button>
                        </div>
                      </div>
                    </motion.div>
                  )}
                  {activeStep === 5 && (
                    <motion.div
                      key="step5"
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -20 }}
                      transition={{ duration: 0.3 }}
                      className="bg-gray-900/60 backdrop-blur-md rounded-2xl border border-gray-800/80 p-6 mb-8 shadow-xl relative overflow-hidden"
                    >
                      <div className="absolute -top-40 -right-40 w-96 h-96 bg-purple-900/30 rounded-full filter blur-3xl animate-pulse"></div>
                      <div className="relative z-10">
                        <div className="flex items-center gap-3 mb-6">
                          <div className="w-10 h-10 rounded-lg bg-purple-600/20 flex items-center justify-center">
                            <FileVideo size={20} className="text-purple-400" />
                          </div>
                          <div>
                            <h2 className="text-2xl font-bold">Preview & Export</h2>
                            <p className="text-gray-400">Final review and export options</p>
                          </div>
                        </div>
                        <div className="flex flex-col lg:flex-row gap-6">
                          <div className="lg:w-2/3">
                            <div className="relative aspect-[9/16] bg-black rounded-xl overflow-hidden shadow-2xl mx-auto" style={{ maxWidth: '360px' }}>
                              <Player
                                component={MyVideo}
                                inputProps={{
                                  images: generatedImages,
                                  audioUrl,
                                  subtitles,
                                  subtitleStyle,
                                  videoDuration,
                                }}
                                durationInFrames={Math.ceil(videoDuration * 30)}
                                compositionWidth={360}
                                compositionHeight={640}
                                fps={30}
                                style={{
                                  width: '100%',
                                  height: '100%',
                                }}
                                controls
                                loop={false}
                              />
                            </div>
                          </div>
                          <div className="lg:w-1/3">
                            <div className="bg-gray-900/80 border border-gray-700/80 rounded-xl p-4 h-full">
                              <h3 className="text-gray-300 mb-4 font-medium">Export Options</h3>
                              <div className="space-y-4">
                                <div>
                                  <label className="block text-sm font-medium text-gray-300 mb-2">Format</label>
                                  <select className="w-full bg-gray-800/60 border border-gray-700/50 rounded-lg py-2.5 px-4 text-white focus:outline-none focus:ring-2 focus:ring-purple-500">
                                    <option>MP4 (Recommended)</option>
                                    <option>MOV</option>
                                    <option>WebM</option>
                                  </select>
                                </div>
                                <div>
                                  <label className="block text-sm font-medium text-gray-300 mb-2">Quality</label>
                                  <select className="w-full bg-gray-800/60 border border-gray-700/50 rounded-lg py-2.5 px-4 text-white focus:outline-none focus:ring-2 focus:ring-purple-500">
                                    <option>High (1080p)</option>
                                    <option>Medium (720p)</option>
                                    <option>Low (480p)</option>
                                  </select>
                                </div>
                                <div>
                                  <label className="block text-sm font-medium text-gray-300 mb-2">Aspect Ratio</label>
                                  <div className="grid grid-cols-3 gap-2">
                                    {['9:16', '4:5', '1:1'].map((ratio) => (
                                      <motion.div
                                        key={ratio}
                                        whileHover={{ scale: 1.05 }}
                                        whileTap={{ scale: 0.95 }}
                                        className="bg-gray-800/60 border border-gray-700/50 rounded-lg p-2 text-center text-sm cursor-pointer hover:bg-purple-600/20 hover:border-purple-500/50"
                                      >
                                        {ratio}
                                      </motion.div>
                                    ))}
                                  </div>
                                </div>
                              </div>
                              <motion.button
                                whileHover={{ scale: 1.03 }}
                                whileTap={{ scale: 0.97 }}
                                className="mt-6 w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 rounded-lg flex items-center justify-center gap-2 shadow-lg shadow-purple-900/20"
                              >
                                <Sparkle size={18} />
                                Export Video
                              </motion.button>
                            </div>
                          </div>
                        </div>
                        <div className="flex justify-between mt-6">
                          <motion.button
                            whileHover={{ scale: 1.05, x: -5 }}
                            whileTap={{ scale: 0.95 }}
                            className="bg-gray-800/80 text-white py-3 px-6 rounded-lg flex items-center gap-2"
                            onClick={() => setActiveStep(4)}
                          >
                            <ChevronRight size={18} className="rotate-180" />
                            Back
                          </motion.button>
                          <motion.button
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                            className="bg-gradient-to-r from-green-500 to-emerald-600 text-white py-3 px-6 rounded-lg flex items-center gap-2 shadow-lg shadow-green-900/20"
                          >
                            <CheckCircle size={18} />
                            Finish
                          </motion.button>
                        </div>
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Message Toast */}
      {message && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: 20 }}
          className="fixed bottom-4 right-4 bg-gray-900/80 backdrop-blur-md border border-gray-800/80 rounded-lg p-4 shadow-xl"
        >
          <p className="text-gray-300">{message}</p>
        </motion.div>
      )}
    </div>
  );
}